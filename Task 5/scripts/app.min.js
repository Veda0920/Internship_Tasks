// Updated app.min.js
const searchInput = document.getElementById("searchInput");
const searchBtn = document.getElementById("searchBtn");
const resultsDiv = document.getElementById("results");
const logDiv = document.getElementById("log");
const darkToggle = document.querySelector(".dark-toggle");
const menuToggle = document.querySelector(".menu-toggle");
const navbar = document.querySelector(".navbar");

let log = JSON.parse(localStorage.getItem("readingLog")) || [];
let currentTheme = localStorage.getItem("theme") || "light";

// Initialize theme
document.body.className = `${currentTheme}-mode`;

// Card Templates
const createBookCard = (book, isLog) => {
  const card = document.createElement("div");
  card.className = "book-card";
  card.innerHTML = `
    <img src="${book.thumbnail || 'assets/placeholder.png'}" alt="${book.title}" class="book-image" loading="lazy">
    <div class="book-info">
      <h3 class="book-title">${book.title}</h3>
      <p class="book-author">${book.authors ? 'By ' + book.authors.join(", ") : 'Unknown author'}</p>
    </div>
    <div class="actions">
      ${isLog ? `
        <button class="read-button">${book.read ? 'âœ“ Read' : 'Mark as Read'}</button>
        <button class="remove-button">Remove</button>
      ` : `
        <button class="add-button">Add to Log</button>
      `}
    </div>
  `;

  // Add event listeners after DOM insertion
  requestIdleCallback(() => {
    if (isLog) {
      card.querySelector('.read-button').addEventListener('click', () => {
        book.read = !book.read;
        updateLog();
        saveLog();
      });
      
      card.querySelector('.remove-button').addEventListener('click', () => {
        log = log.filter(b => b.id !== book.id);
        updateLog();
        saveLog();
      });
    } else {
      card.querySelector('.add-button').addEventListener('click', () => {
        if (!log.find(b => b.id === book.id)) {
          log.push({...book, read: false});
          updateLog();
          saveLog();
        }
      });
    }
  });

  return card;
};

// Update DOM functions
const updateLog = () => {
  logDiv.innerHTML = "";
  if (log.length === 0) {
    logDiv.innerHTML = "<p>No books in reading log yet.</p>";
    return;
  }
  
  log.forEach(book => {
    const card = createBookCard(book, true);
    logDiv.appendChild(card);
  });
};

const searchBooks = async () => {
  const query = searchInput.value.trim();
  if (!query) return;
  
  resultsDiv.innerHTML = "<p>Loading...</p>";
  
  try {
    const res = await fetch(`https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(query)}&maxResults=20`);
    const data = await res.json();
    
    resultsDiv.innerHTML = "";
    
    if (!data.items || data.items.length === 0) {
      resultsDiv.innerHTML = "<p>No books found. Try a different search.</p>";
      return;
    }
    
    data.items.forEach(item => {
      const info = item.volumeInfo;
      const book = {
        id: item.id,
        title: info.title,
        authors: info.authors,
        thumbnail: info.imageLinks?.thumbnail?.replace(/^http:/, 'https:')
      };
      
      const card = createBookCard(book, false);
      resultsDiv.appendChild(card);
    });
  } catch (e) {
    resultsDiv.innerHTML = "<p>Error loading books. Please try again.</p>";
    console.error(e);
  }
};

// Theme functions
const saveLog = () => {
  localStorage.setItem("readingLog", JSON.stringify(log));
};

const saveTheme = (theme) => {
  localStorage.setItem("theme", theme);
};

// Event Listeners
searchBtn.addEventListener("click", searchBooks);
searchInput.addEventListener("keypress", e => {
  if (e.key === "Enter") searchBooks();
});

darkToggle.addEventListener("click", () => {
  currentTheme = currentTheme === "light" ? "dark" : "light";
  document.body.className = `${currentTheme}-mode`;
  saveTheme(currentTheme);
});

menuToggle.addEventListener("click", () => {
  navbar.classList.toggle("open");
});

// Initialize app
updateLog();

// Smooth scroll for better navigation
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      target.scrollIntoView({ behavior: 'smooth' });
    }
  });
});
